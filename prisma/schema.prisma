generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

model User {
  stdCode           String             @id @db.VarChar(12)
  loginName         String             @db.VarChar(12)
  name              String             @db.VarChar(100)
  loggedCount       Int                @default(0) @db.UnsignedInt
  stdId             String             @db.VarChar(50)
  titleTh           String             @db.VarChar(50)
  firstNameTh       String             @db.VarChar(100)
  middleNameTh      String?            @db.VarChar(100)
  lastNameTh        String             @db.VarChar(100)
  copenId           String             @db.VarChar(50)
  campusCode        String             @db.VarChar(10)
  facultyCode       String             @db.VarChar(10)
  departmentCode    String             @db.VarChar(10)
  majorCode         String             @db.VarChar(10)
  nationCode        String             @db.VarChar(10)
  studentStatusCode String             @db.VarChar(10)
  studentTypeCode   String             @db.VarChar(10)
  edulevelCode      String             @db.VarChar(10)
  studentYear       String             @db.VarChar(10)
  advisorId         String?            @db.VarChar(50)
  email             String?            @db.VarChar(100)
  mobileNo          String?            @db.VarChar(15)
  createdAt         DateTime           @default(now()) @db.DateTime(0)
  requestUpdateAt   DateTime?          @db.DateTime(0)
  UserExamSchedule  UserExamSchedule[]
  RegisteredCourse  RegisteredCourse[]
  RequestUpdate     RequestUpdate[]
  role              UserRole           @default(STUDENT)
  Advisor           Advisor?           @relation(fields: [advisorId], references: [advisorId])
  Major             Major              @relation(fields: [majorCode], references: [majorCode])
  Department        Department         @relation(fields: [departmentCode], references: [departmentCode])
  Faculty           Faculty            @relation(fields: [facultyCode], references: [facultyCode])
  Campus            Campus             @relation(fields: [campusCode], references: [campusCode])
  // Copen             Copen?             @relation(fields: [copenId], references: [copenId])
  UserReview        UserReview[]
  UserExamNote      UserExamNote[]
  ExamSchedule      ExamSchedule[]
  Session           Session[]
}

model Session {
  id        String    @id @default(nanoid(10)) @db.VarChar(100)
  stdCode   String    @db.VarChar(100)
  ip        String?   @db.VarChar(45) // IPv4/IPv6
  userAgent String?   @db.Text
  createdAt DateTime  @default(now()) @db.DateTime(0)
  expiredAt DateTime  @db.DateTime(0)
  revokedAt DateTime? @db.DateTime(0)

  user User @relation(fields: [stdCode], references: [stdCode])

  @@index([stdCode])
  @@index([expiredAt])
  @@index([stdCode, expiredAt]) // composite index: ค้นหาของ user ที่ยังไม่หมดอายุได้ไว
}

// model Copen {
//   copenId     String @id @db.VarChar(50)
//   copenNameTh String @db.VarChar(255)
//   User        User[]
// }

model Campus {
  campusCode   String @id @db.VarChar(10)
  campusNameTh String @db.VarChar(100)
  User         User[]
}

model Faculty {
  facultyCode   String @id @db.VarChar(10)
  facultyNameTh String @db.VarChar(100)
  User          User[]
}

model Department {
  departmentCode   String @id @db.VarChar(10)
  departmentNameTh String @db.VarChar(100)
  User             User[]
}

model Major {
  majorCode   String @id @db.VarChar(10)
  majorNameTh String @db.VarChar(100)
  User        User[]
}

model Advisor {
  advisorId     String @id @db.VarChar(50)
  advisorNameTh String @db.VarChar(100)
  positionTh    String @db.VarChar(50)

  User User[]
}

enum ExamScheduleStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportBy {
  SEED
  ADMIN
  STUDENT
}

enum SectionType {
  LECT
  LAB
}

model ExamSchedule {
  id             String      @id @default(cuid())
  date           DateTime    @db.DateTime(0)
  timeFrom       Int         @db.UnsignedInt
  timeTo         Int         @db.UnsignedInt
  subjectCode    String      @db.VarChar(50)
  sectionCode    String      @db.VarChar(50)
  room           String      @db.VarChar(50)
  studentIdRange String?     @db.VarChar(50)
  createdAt      DateTime    @default(now()) @db.DateTime(0)
  deletedAt      DateTime?   @db.DateTime(0)
  sectionType    SectionType

  isCorrectCount   Int                @default(0) // จำนวนโหวตถูกต้อง
  isIncorrectCount Int                @default(0) // จำนวนโหวตที่ผิด
  status           ExamScheduleStatus @default(APPROVED) // pending, approved, rejected

  stdCode          String?            @db.VarChar(12)
  reportBy         ReportBy           @default(STUDENT)
  User             User?              @relation(fields: [stdCode], references: [stdCode])
  reviews          UserReview[]
  UserExamSchedule UserExamSchedule[]
}

model UserReview {
  id             String   @id @default(uuid())
  examScheduleId String
  comment        String?  @db.VarChar(50)
  isCorrect      Boolean // เช่น: ผู้ใช้คิดว่าถูกต้องหรือไม่
  createdAt      DateTime @default(now()) @db.DateTime(0)

  stdCode String @db.VarChar(12)

  ExamSchedule ExamSchedule @relation(fields: [examScheduleId], references: [id])
  User         User         @relation(fields: [stdCode], references: [stdCode])
}

model RegisteredCourse {
  id        String @id @default(cuid())
  sectionId Int
  stdCode   String @db.VarChar(12)

  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)

  CourseSchedule CourseSchedule @relation(fields: [sectionId], references: [sectionId])
  User           User           @relation(fields: [stdCode], references: [stdCode])

  @@unique([stdCode, sectionId])
  @@index([stdCode])
  @@index([sectionId])
}

enum DayW {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model CourseSchedule {
  sectionId     Int         @id
  subjectCode   String      @db.VarChar(50)
  subjectNameTh String      @db.VarChar(100)
  sectionCode   String      @db.VarChar(10)
  sectionType   SectionType @default(LECT)
  teacherName   String?     @db.Text
  timeFrom      Int         @db.UnsignedInt // e.g., "13.00" = 13 Hour * 60 Minutes = 780 Minutes
  timeTo        Int         @db.UnsignedInt // e.g., "16.30" = 16.30 Hour * 60 Minutes = 978 Minutes
  dayW          DayW // e.g., "MON"
  roomNameTh    String      @db.VarChar(50)

  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)

  RegisteredCourse RegisteredCourse[]
  UserExamSchedule UserExamSchedule[]

  @@index([subjectCode])
  @@index([sectionId])
}

// model CourseTeacherName {
//   id String @id @default(cuid())
//   name
// }

model UserExamSchedule {
  id             String         @id @default(cuid())
  stdCode        String         @db.VarChar(12)
  examScheduleId String         @db.VarChar(50)
  sectionId      Int
  createdAt      DateTime       @default(now()) @db.DateTime(0)
  updatedAt      DateTime       @updatedAt @db.DateTime(0)
  deletedAt      DateTime?      @db.DateTime(0)
  User           User           @relation(fields: [stdCode], references: [stdCode])
  ExamSchedule   ExamSchedule   @relation(fields: [examScheduleId], references: [id])
  CourseSchedule CourseSchedule @relation(fields: [sectionId], references: [sectionId])
  UserExamNote   UserExamNote[]

  @@unique([stdCode, examScheduleId, sectionId])
  @@index([stdCode])
  @@index([examScheduleId])
}

model UserExamNote {
  note             String?          @db.VarChar(50)
  createdAt        DateTime         @default(now()) @db.DateTime(0)
  updatedAt        DateTime         @updatedAt @db.DateTime(0)
  deletedAt        DateTime?        @db.DateTime(0)
  userExamId       String           @id @db.VarChar(50)
  stdCode          String           @db.VarChar(12)
  User             User             @relation(fields: [stdCode], references: [stdCode])
  UserExamSchedule UserExamSchedule @relation(fields: [userExamId], references: [id])
}

model RequestUpdate {
  id        String   @id @default(cuid())
  stdCode   String   @db.VarChar(12)
  User      User     @relation(fields: [stdCode], references: [stdCode])
  createdAt DateTime @default(now()) @db.DateTime(0)
}
